/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    sessions: Session;
    accounts: Account;
    verifications: Verification;
    passkeys: Passkey;
    'admin-invitations': AdminInvitation;
    orders: Order;
    errors: Error;
    proxies: Proxy;
    profiles: Profile;
    'payload-uploads': PayloadUpload;
    'Audit-log': AuditLog;
    'payload-folders': FolderInterface;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
    'payload-query-presets': PayloadQueryPreset;
  };
  collectionsJoins: {
    'payload-folders': {
      documentsAndFolders: 'payload-folders' | 'payload-uploads';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    sessions: SessionsSelect<false> | SessionsSelect<true>;
    accounts: AccountsSelect<false> | AccountsSelect<true>;
    verifications: VerificationsSelect<false> | VerificationsSelect<true>;
    passkeys: PasskeysSelect<false> | PasskeysSelect<true>;
    'admin-invitations': AdminInvitationsSelect<false> | AdminInvitationsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    errors: ErrorsSelect<false> | ErrorsSelect<true>;
    proxies: ProxiesSelect<false> | ProxiesSelect<true>;
    profiles: ProfilesSelect<false> | ProfilesSelect<true>;
    'payload-uploads': PayloadUploadsSelect<false> | PayloadUploadsSelect<true>;
    'Audit-log': AuditLogSelect<false> | AuditLogSelect<true>;
    'payload-folders': PayloadFoldersSelect<false> | PayloadFoldersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
    'payload-query-presets': PayloadQueryPresetsSelect<false> | PayloadQueryPresetsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword:
    | {
        email: string;
      }
    | {
        username: string;
      };
  login:
    | {
        email: string;
        password: string;
      }
    | {
        password: string;
        username: string;
      };
  registerFirstUser: {
    password: string;
    username?: string;
    email: string;
  };
  unlock:
    | {
        email: string;
      }
    | {
        username: string;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  userRole?: ('User' | 'Admin') | null;
  /**
   * Users chosen display name
   */
  name?: string | null;
  /**
   * The email of the user
   */
  email: string;
  /**
   * Whether the email of the user has been verified
   */
  emailVerified: boolean;
  /**
   * The image of the user
   */
  image?: string | null;
  createdAt: string;
  updatedAt: string;
  /**
   * The username of the user
   */
  username?: string | null;
  /**
   * The display username of the user
   */
  displayUsername?: string | null;
  /**
   * The normalized email of the user
   */
  normalizedEmail?: string | null;
  /**
   * The phone number of the user
   */
  phoneNumber?: string | null;
  /**
   * Whether the phone number of the user has been verified
   */
  phoneNumberVerified?: boolean | null;
  /**
   * The role of the user
   */
  role?: ('admin' | 'user') | null;
  /**
   * Whether the user is banned from the platform
   */
  banned?: boolean | null;
  /**
   * The reason for the ban
   */
  banReason?: string | null;
  /**
   * The date and time when the ban will expire
   */
  banExpires?: string | null;
  verified?: boolean | null;
}
/**
 * Sessions are active sessions for users. They are used to authenticate users with a session token
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions".
 */
export interface Session {
  id: string;
  /**
   * The date and time when the session will expire
   */
  expiresAt: string;
  /**
   * The unique session token
   */
  token: string;
  createdAt: string;
  updatedAt: string;
  /**
   * The IP address of the device
   */
  ipAddress?: string | null;
  /**
   * The user agent information of the device
   */
  userAgent?: string | null;
  /**
   * The user that the session belongs to
   */
  user: string | User;
  /**
   * The admin who is impersonating this session
   */
  impersonatedBy?: (string | null) | User;
}
/**
 * Accounts are used to store user accounts for authentication providers
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accounts".
 */
export interface Account {
  id: string;
  /**
   * The id of the account as provided by the SSO or equal to userId for credential accounts
   */
  accountId: string;
  /**
   * The id of the provider as provided by the SSO
   */
  providerId: string;
  /**
   * The user that the account belongs to
   */
  user: string | User;
  /**
   * The access token of the account. Returned by the provider
   */
  accessToken?: string | null;
  /**
   * The refresh token of the account. Returned by the provider
   */
  refreshToken?: string | null;
  /**
   * The id token for the account. Returned by the provider
   */
  idToken?: string | null;
  /**
   * The date and time when the access token will expire
   */
  accessTokenExpiresAt?: string | null;
  /**
   * The date and time when the refresh token will expire
   */
  refreshTokenExpiresAt?: string | null;
  /**
   * The scope of the account. Returned by the provider
   */
  scope?: string | null;
  /**
   * The hashed password of the account. Mainly used for email and password authentication
   */
  password?: string | null;
  createdAt: string;
  updatedAt: string;
}
/**
 * Verifications are used to verify authentication requests
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verifications".
 */
export interface Verification {
  id: string;
  /**
   * The identifier of the verification request
   */
  identifier: string;
  /**
   * The value to be verified
   */
  value: string;
  /**
   * The date and time when the verification request will expire
   */
  expiresAt: string;
  createdAt: string;
  updatedAt: string;
}
/**
 * Passkeys are used to authenticate users
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passkeys".
 */
export interface Passkey {
  id: string;
  /**
   * The name of the passkey
   */
  name?: string | null;
  /**
   * The public key of the passkey
   */
  publicKey: string;
  /**
   * The user that the passkey belongs to
   */
  user: string | User;
  /**
   * The unique identifier of the registered credential
   */
  credentialID: string;
  /**
   * The counter of the passkey
   */
  counter: number;
  /**
   * The type of device used to register the passkey
   */
  deviceType: string;
  /**
   * Whether the passkey is backed up
   */
  backedUp: boolean;
  /**
   * The transports used to register the passkey
   */
  transports: string;
  createdAt: string;
  aaguid?: string | null;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin-invitations".
 */
export interface AdminInvitation {
  id: string;
  role: 'admin' | 'user';
  token: string;
  url?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: string;
  orderStatus?: ('Pending' | 'Purchased' | 'Fulfilled' | 'Blocked' | 'Cancelled' | 'Archived') | null;
  orderValue?: number | null;
  orderNumber?: number | null;
  orderLink?: string | null;
  marketplace?: ('Stubhub' | 'SeatGeek' | 'GoTickets') | null;
  eventOrPerformerName?: string | null;
  venueName?: string | null;
  parkingTickets?:
    | {
        source?: ('SpotHero' | 'ParkWhiz' | 'ParkMobile' | 'AceParking') | null;
        link?: string | null;
        type?: 'Eticket' | null;
        status?: ('Pending' | 'Purchased' | 'Fulfilled' | 'Blocked' | 'Cancelled') | null;
        parkingSpotLocation?: string | null;
        projectedPurchasePrice?: number | null;
        id?: string | null;
      }[]
    | null;
  orderHistory?:
    | {
        source?: ('SpotHero' | 'ParkWhiz' | 'ParkMobile' | 'AceParking') | null;
        link?: string | null;
        type?: 'Eticket' | null;
        status?: ('Pending' | 'Purchased' | 'Fulfilled' | 'Blocked' | 'Cancelled') | null;
        parkingSpotLocation?: string | null;
        projectedPurchasePrice?: number | null;
        id?: string | null;
      }[]
    | null;
  orderNotes?: string | null;
  handbook?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errors".
 */
export interface Error {
  id: string;
  orderStatus?: ('Pending' | 'Purchased' | 'Fulfilled' | 'Blocked' | 'Cancelled' | 'Archived') | null;
  orderValue?: number | null;
  orderNumber?: number | null;
  orderLink?: string | null;
  marketplace?: ('Stubhub' | 'SeatGeek' | 'GoTickets') | null;
  eventOrPerformerName?: string | null;
  venueName?: string | null;
  parkingTickets?:
    | {
        source?: ('SpotHero' | 'ParkWhiz' | 'ParkMobile' | 'AceParking') | null;
        link?: string | null;
        type?: 'Eticket' | null;
        status?: ('Pending' | 'Purchased' | 'Fulfilled' | 'Blocked' | 'Cancelled') | null;
        parkingSpotLocation?: string | null;
        projectedPurchasePrice?: number | null;
        id?: string | null;
      }[]
    | null;
  orderHistory?:
    | {
        source?: ('SpotHero' | 'ParkWhiz' | 'ParkMobile' | 'AceParking') | null;
        link?: string | null;
        type?: 'Eticket' | null;
        status?: ('Pending' | 'Purchased' | 'Fulfilled' | 'Blocked' | 'Cancelled') | null;
        parkingSpotLocation?: string | null;
        projectedPurchasePrice?: number | null;
        id?: string | null;
      }[]
    | null;
  orderNotes?: string | null;
  userHandbook?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "proxies".
 */
export interface Proxy {
  id: string;
  proxyName: string;
  proxystatus: 'active' | 'maintenance' | 'disabled';
  connectionConfig?:
    | {
        provider?: string | null;
        lastHealthCheck?: string | null;
        host: string;
        port?: number | null;
        authType?: ('none' | 'usernamePassword' | 'ipWhitelist') | null;
        credentials?: {
          username?: string | null;
          password?: string | null;
        };
        id?: string | null;
      }[]
    | null;
  healthStatus?: string | null;
  userHandbook?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profiles".
 */
export interface Profile {
  id: string;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * All media uploaded from the admin panel.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-uploads".
 */
export interface PayloadUpload {
  id: string;
  alt: string;
  caption?: string | null;
  prefix?: string | null;
  folder?: (string | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders".
 */
export interface FolderInterface {
  id: string;
  name: string;
  folder?: (string | null) | FolderInterface;
  documentsAndFolders?: {
    docs?: (
      | {
          relationTo?: 'payload-folders';
          value: string | FolderInterface;
        }
      | {
          relationTo?: 'payload-uploads';
          value: string | PayloadUpload;
        }
    )[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Audit-log".
 */
export interface AuditLog {
  id: string;
  operation: string;
  collection: string;
  documentId?: string | null;
  user: string | User;
  userAgent?: string | null;
  hook?: string | null;
  type: 'info' | 'debug' | 'warning' | 'error' | 'audit' | 'security' | 'unknown';
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'sessions';
        value: string | Session;
      } | null)
    | ({
        relationTo: 'accounts';
        value: string | Account;
      } | null)
    | ({
        relationTo: 'verifications';
        value: string | Verification;
      } | null)
    | ({
        relationTo: 'passkeys';
        value: string | Passkey;
      } | null)
    | ({
        relationTo: 'admin-invitations';
        value: string | AdminInvitation;
      } | null)
    | ({
        relationTo: 'orders';
        value: string | Order;
      } | null)
    | ({
        relationTo: 'errors';
        value: string | Error;
      } | null)
    | ({
        relationTo: 'proxies';
        value: string | Proxy;
      } | null)
    | ({
        relationTo: 'profiles';
        value: string | Profile;
      } | null)
    | ({
        relationTo: 'payload-uploads';
        value: string | PayloadUpload;
      } | null)
    | ({
        relationTo: 'Audit-log';
        value: string | AuditLog;
      } | null)
    | ({
        relationTo: 'payload-folders';
        value: string | FolderInterface;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-query-presets".
 */
export interface PayloadQueryPreset {
  id: string;
  title: string;
  isShared?: boolean | null;
  access?: {
    read?: {
      constraint?: ('everyone' | 'onlyMe' | 'specificUsers') | null;
      users?: (string | User)[] | null;
    };
    update?: {
      constraint?: ('everyone' | 'onlyMe' | 'specificUsers') | null;
      users?: (string | User)[] | null;
    };
    delete?: {
      constraint?: ('everyone' | 'onlyMe' | 'specificUsers') | null;
      users?: (string | User)[] | null;
    };
  };
  where?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  columns?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  relatedCollection: 'payload-uploads';
  /**
   * This is a temporary field used to determine if updating the preset would remove the user's access to it. When `true`, this record will be deleted after running the preset's `validate` function.
   */
  isTemp?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  userRole?: T;
  name?: T;
  email?: T;
  emailVerified?: T;
  image?: T;
  createdAt?: T;
  updatedAt?: T;
  username?: T;
  displayUsername?: T;
  normalizedEmail?: T;
  phoneNumber?: T;
  phoneNumberVerified?: T;
  role?: T;
  banned?: T;
  banReason?: T;
  banExpires?: T;
  verified?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sessions_select".
 */
export interface SessionsSelect<T extends boolean = true> {
  expiresAt?: T;
  token?: T;
  createdAt?: T;
  updatedAt?: T;
  ipAddress?: T;
  userAgent?: T;
  user?: T;
  impersonatedBy?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accounts_select".
 */
export interface AccountsSelect<T extends boolean = true> {
  accountId?: T;
  providerId?: T;
  user?: T;
  accessToken?: T;
  refreshToken?: T;
  idToken?: T;
  accessTokenExpiresAt?: T;
  refreshTokenExpiresAt?: T;
  scope?: T;
  password?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "verifications_select".
 */
export interface VerificationsSelect<T extends boolean = true> {
  identifier?: T;
  value?: T;
  expiresAt?: T;
  createdAt?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "passkeys_select".
 */
export interface PasskeysSelect<T extends boolean = true> {
  name?: T;
  publicKey?: T;
  user?: T;
  credentialID?: T;
  counter?: T;
  deviceType?: T;
  backedUp?: T;
  transports?: T;
  createdAt?: T;
  aaguid?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admin-invitations_select".
 */
export interface AdminInvitationsSelect<T extends boolean = true> {
  role?: T;
  token?: T;
  url?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  orderStatus?: T;
  orderValue?: T;
  orderNumber?: T;
  orderLink?: T;
  marketplace?: T;
  eventOrPerformerName?: T;
  venueName?: T;
  parkingTickets?:
    | T
    | {
        source?: T;
        link?: T;
        type?: T;
        status?: T;
        parkingSpotLocation?: T;
        projectedPurchasePrice?: T;
        id?: T;
      };
  orderHistory?:
    | T
    | {
        source?: T;
        link?: T;
        type?: T;
        status?: T;
        parkingSpotLocation?: T;
        projectedPurchasePrice?: T;
        id?: T;
      };
  orderNotes?: T;
  handbook?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errors_select".
 */
export interface ErrorsSelect<T extends boolean = true> {
  orderStatus?: T;
  orderValue?: T;
  orderNumber?: T;
  orderLink?: T;
  marketplace?: T;
  eventOrPerformerName?: T;
  venueName?: T;
  parkingTickets?:
    | T
    | {
        source?: T;
        link?: T;
        type?: T;
        status?: T;
        parkingSpotLocation?: T;
        projectedPurchasePrice?: T;
        id?: T;
      };
  orderHistory?:
    | T
    | {
        source?: T;
        link?: T;
        type?: T;
        status?: T;
        parkingSpotLocation?: T;
        projectedPurchasePrice?: T;
        id?: T;
      };
  orderNotes?: T;
  userHandbook?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "proxies_select".
 */
export interface ProxiesSelect<T extends boolean = true> {
  proxyName?: T;
  proxystatus?: T;
  connectionConfig?:
    | T
    | {
        provider?: T;
        lastHealthCheck?: T;
        host?: T;
        port?: T;
        authType?: T;
        credentials?:
          | T
          | {
              username?: T;
              password?: T;
            };
        id?: T;
      };
  healthStatus?: T;
  userHandbook?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "profiles_select".
 */
export interface ProfilesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-uploads_select".
 */
export interface PayloadUploadsSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  prefix?: T;
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Audit-log_select".
 */
export interface AuditLogSelect<T extends boolean = true> {
  operation?: T;
  collection?: T;
  documentId?: T;
  user?: T;
  userAgent?: T;
  hook?: T;
  type?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders_select".
 */
export interface PayloadFoldersSelect<T extends boolean = true> {
  name?: T;
  folder?: T;
  documentsAndFolders?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-query-presets_select".
 */
export interface PayloadQueryPresetsSelect<T extends boolean = true> {
  title?: T;
  isShared?: T;
  access?:
    | T
    | {
        read?:
          | T
          | {
              constraint?: T;
              users?: T;
            };
        update?:
          | T
          | {
              constraint?: T;
              users?: T;
            };
        delete?:
          | T
          | {
              constraint?: T;
              users?: T;
            };
      };
  where?: T;
  columns?: T;
  relatedCollection?: T;
  isTemp?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}